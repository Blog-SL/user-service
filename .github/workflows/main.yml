name: Deploy User Service to EC2 with Docker

on:
  push:
    branches: ["main"]

env:
  SERVICE_NAME: user-service # Unique service name
  DOCKER_IMAGE: naveenlankesha/blogsl-user-service # Docker Hub repo
  CONTAINER_NAME: blogsl-user-service-container # Container name
  EC2_HOST: 13.203.89.95 # EC2 public IP
  EC2_USER: ubuntu # Default user

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1. Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 2. Build and Push image to Docker Hub
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${GITHUB_SHA}
          docker build -t $DOCKER_IMAGE:$IMAGE_TAG .
          docker push $DOCKER_IMAGE:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # 3. Deploy on EC2 using SSH
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DOCKER_IMAGE,CONTAINER_NAME,IMAGE_TAG,SERVICE_NAME
          script: |
            mkdir -p ~/apps/$SERVICE_NAME
            cd ~/apps/$SERVICE_NAME

            # âœ… Create .env specific for user-service
            cat > .env <<EOL
            PORT=${{ secrets.PORT }}
            MONGO_URI=${{ secrets.MONGO_URI }}
            JWT_SEC=${{ secrets.JWT_SEC }}
            Cloud_Name=${{ secrets.Cloud_Name }}
            Cloud_Api_Key=${{ secrets.Cloud_Api_Key }}
            Cloud_Api_Secret=${{ secrets.Cloud_Api_Secret }}
            Google_Client_id=${{ secrets.Google_Client_id }}
            Google_client_secret=${{ secrets.Google_client_secret }}            
            EOL

            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull $DOCKER_IMAGE:$IMAGE_TAG
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            docker run -d --name $CONTAINER_NAME -p 5000:5000 --env-file .env $DOCKER_IMAGE:$IMAGE_TAG
